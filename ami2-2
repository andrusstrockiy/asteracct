#!/usr/bin/env python

# Todo create parse function from extensions.conf
# Todo add logger
# Todo create h323-call-type='Voip' Indicates call leg type. Possible values are telephony and VoIP.

import socket, sys
import datetime
import hashlib
import time

import acct
from pg import timestamp as timestamp
# from acct import accountingStart


asterisk_amihost = "192.168.6.254"
asterisk_amiport = '5038'
asterisk_amiusername = 'test1'
asterisk_amisecret = 'test'


def confid_gen(val):
    """Function which generates confid for h323_confid radius attribute"""
    m = hashlib.md5()
    m.update(str(val))
    m = m.hexdigest()
    # Format to match the following standard
    # 16-byte number in hexadecimal notation with a space between each 4-byte integer
    # i.e 29FB117C 640E9815 F342ABAD 9DCB6A72
    m = m[0:8] + ' ' + m[8:16] + ' ' + m[16:24] + ' ' + m[24:]
    return m.upper()


def open_sock(asockip, asockport):
    """Function to open socket"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sconnected = 1
    try:
        s.connect((asockip, int(asockport)))
    except socket.error as msg:
        print('Something\'s wrong with connection to host %s:%d. Exception type is %s' % (asockip, asockport, msg))
        s.close()
        sconnected = None
        sys.exit(1)
    if sconnected is not None:
        return s.makefile("rw", 8096)


def connect_ami(ami_username, ami_secret):
    """Asterisk ami connection"""
    return "Action: Login\r\nUsername: %s\r\nSecret: %s\r\nEvents: On\r\n\r\n" % (ami_username, ami_secret)


# Asterisk AMI connection


def ami_connection(ast_musername, ast_msecret, ast_mport, ast_ip='localhost', ):
    """Function to connect to astersik if no ip specified it make connection to a localhost
    """
    avdict = {}
    connected = True
    # Prepare and open socket
    FILE = open_sock(ast_ip, ast_mport)

    # Connect to Asterisk
    FILE.write("Action: Login\r\nUsername: %s\r\nSecret: %s\r\nEvents: On\r\n\r\n" % (ast_musername, ast_msecret))
    FILE.flush()
    while connected:
        # try:
        data = FILE.readline()
        data.strip(":")
        results = data.strip().split(": ")
        # Uncomment bellow to print output from Asterisk ami manager output
        # print(results)
        if len(results) == 1 and len(results[0]) > 0:
            avdict[results[0].strip(":")] = ''
        elif len(results) == 2:
            avdict[results[0]] = results[1]
            avdict['timestamp'] = timestamp()
        elif len(results[0]) == 0 and len(avdict) != 0:
            print(avdict)
            if avdict.get('Message') and avdict.get('Response'):
                if avdict['Message'] == 'Authentication accepted' and avdict['Response'] == 'Success':
                    print("AMI manager connected starting to receive data ...\n")
                    avdict.clear()
                elif avdict['Message'] == 'Authentication failed' and avdict['Response'] == 'Error':
                    print("Please check Asterisk ami managers credentials username and secret ... \n")
                    FILE.write("Action: Logoff\r\n")
                    connected = False
                    avdict.clear()
                    FILE.close()
                    break
            elif avdict.get('Event') and avdict['Event'] == 'Shutdown' and avdict.get('Restart') and avdict[
                'Restart'] == 'False':
                ami_connection(ast_ip=asterisk_amihost, ast_mport=int(asterisk_amiport),
                               ast_musername=asterisk_amiusername,
                               ast_msecret=asterisk_amisecret)
            elif avdict.get('Event') and avdict.get('EventName') and avdict.get('Application'):
                # Start Events
                if avdict['Event'] == 'CEL' and avdict['EventName'] == 'ANSWER' and \
                                avdict['Application'] == 'Answer':
                    print(
                             "Running Accounting Start with the following parameters ANI:%s DNI:%s Confid:%s Setup time:%s") \
                         % (avdict['CallerIDnum'], avdict['CallerIDrdnis'], confid_gen(avdict['Channel']),
                            avdict['timestamp'])
                    if avdict['CallerIDrdnis'] == '':
                        # In case of incoming call swithc to DND
                        acct.accountingStart(aani=avdict['CallerIDnum'], adni=avdict['CallerIDdnid'],
                                             aconnectime=avdict['timestamp'],
                                             aconfid=confid_gen(avdict['Channel']), asetuptime=avdict['timestamp'],
                                             acallorig='h323-call-origin=answer')
                    else:
                        acct.accountingStart(aani=avdict['CallerIDnum'], adni=avdict['CallerIDrdnis'],
                                             aconnectime=avdict['timestamp'],
                                             aconfid=confid_gen(avdict['Channel']), asetuptime=avdict['timestamp'])
                    avdict.clear()
            # Start and stop accounting events
            elif avdict.get('BillableSeconds'):
                if avdict['Event'] == 'Cdr':
                    print(
                             "\n Running Accounting Stop with the following parameters ANI:%s DNI:%s Confid:%s Setup time:%s") \
                         % (avdict['Source'], avdict['Destination'], confid_gen(avdict['Channel']),
                            avdict['timestamp'])
                    if avdict['Destination'] == '' or avdict['Destination'] == 's' and avdict.keys() in ['Address']:
                        # In case of incoming call switch to DND
                        acct.accountingStop(aani=avdict['Source'], adni=avdict['Destination'],
                                            aconnectime=avdict['timestamp'], acause=avdict['Cause'],
                                            aconfid=confid_gen(avdict['Channel']), asetuptime=avdict['timestamp'],
                                            adisconectime=timestamp(avdict['EndTime']),
                                            agwid=avdict['Address'], aacountsessiontime=avdict['BillableSeconds'],
                                            acallorig='h323-call-origin=answer')
                        avdict.clear()
                    elif avdict.keys() not in ['Cause']:
                        acct.accountingStop(aani=avdict['Source'], adni=avdict['Destination'],
                                            aconnectime=avdict['timestamp'], acause=16,
                                            aconfid=confid_gen(avdict['Channel']),
                                            asetuptime=timestamp(avdict['StartTime']),
                                            adisconectime=timestamp(avdict['EndTime']),
                                            agwid=avdict['Channel'], aacountsessiontime=avdict['BillableSeconds'],
                                            acallorig='h323-call-origin=answer' if avdict[
                                                                                       'Destination'] == 's' else 'h323-call-origin=originate',
                                            acalltype=avdict['Channel'][0:3])
                        avdict.clear()
                    else:
                        acct.accountingStop(aani=avdict['Source'], adni=avdict['Destination'],
                                            aconnectime=avdict['timestamp'], acause=int(avdict['Cause']),
                                            aconfid=confid_gen(avdict['Channel']), asetuptime=avdict['timestamp'],
                                            adisconectime=timestamp(avdict['EndTime']),
                                            agwid=avdict['Channel'], aacountsessiontime=avdict['BillableSeconds'],
                                            acallorig='h323-call-origin=answer')
                        avdict.clear()
            else:
                avdict.clear()
                # except:
                # continue


# Time format "10:11:09.000 UTC Tue Mar 31 2015"


def main():
    ami_connection(ast_ip=asterisk_amihost, ast_mport=int(asterisk_amiport), ast_musername=asterisk_amiusername,
                   ast_msecret=asterisk_amisecret)


if __name__ == "__main__":
    main()

